[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "paRticles: Quick, unpolished thoughts, discoveries, and ideas about all things R."
  },
  {
    "objectID": "posts/2024-07-13-welcome/index.html",
    "href": "posts/2024-07-13-welcome/index.html",
    "title": "paRticles",
    "section": "",
    "text": "One of my resolutions right now is to be better about putting things out into the internet world, without feeling like they need to be polished or perfect or full of lots of content.\nI already have a mostly unused blog as well as some long-form posts on other blogs and I’ll probably stick to those places when I manage to write things that are, you know, thorough and carefully edited over weeks. But probably my favorite thing I’ve ever put out into the internet world is this unhinged stream-of-consciousness about trying to learn NSE, and I want to get more comfortable with that kind of in-the-moment micro post.\nSo: here is where I’ll try to put quick ideas, discoveries, and little things that I figure out or think are cool. Welcome to paRticles!"
  },
  {
    "objectID": "posts/2024-08-14-positconf_quarto/index.html",
    "href": "posts/2024-08-14-positconf_quarto/index.html",
    "title": "Notes from Posit::conf session on Quarto",
    "section": "",
    "text": "I took so many notes for myself in this session I figured why not throw them on here!\n\n\nDavid Keyes: Making pretty reports\n\nCreate a layout with Typst.\n💡report.qmd -&gt; typst-show.typ passes variables from Quarto params to typst -&gt; typst-template.typ sets up report properties like fonts, colors, page margins, backgrounds. “grid” to control placements.\n\n\nUse functions to make plots consistent.\n💡ggplot layering makes this nice\nif (&lt;function input&gt;) p &lt;- p + &lt;layer option&gt;\nelse p &lt;- p + &lt;different layer option&gt;\n💡custom themes! But geom_text() etc are not impacted by themes, use update_geom_defaults()\n🔗 rfor.us/posit2024slides\n\n\n\n\nMine Çetinkaya-Rundel: Books!\n\nMultiple Outputs\n💡Put things in a fenced div (:::) -&gt; write scss to style it for html and put it as theme -&gt; write style.tex file to style it for latex/pdf and include it in header.\n💡“litter” your qmd file with LaTeX tags like \\newpage tags, they will be ignored in html render. Use \\index tags and separate tex, then \\printindex at the end.\n\n\nAccessibility/Reproducibility\n💡 Use fig-alt for alt text. parsermd to look for instances of ggplot that don’t have fig alt.\n💡 Set global options in _common.R.\n💡 Use Quarto’s announcement option in _quarto.yml to track status of WIP project/chapters.\n💡 Avoid freeze; re-run all code in GH Actions. 😱 Quarto Actions Repo!!!\n\n\nMultilingual\n💡 Use “embed” shortcode to insert notebooks with different engines. 🤯\n🔗 bit.ly/books-conf24\n\n\n\n\nMeghan Hall: templates\n💡 Start by tinkering with custom scss (reference as theme in _quarto.yml) and make use of custom divs!\nIn qmd:\n::: some-div-name\ntext\n:::\nIn scss:\n.some-div-name {\n&lt;css junk&gt;\n}\n💡 “inspect” in browser and Mozilla web docs for css/html elements.\n💡 Put all this in an internal package, make it copy from inst to working directory and open qmd in editor.\n🤔 Internal package vs. template in RStudio vs quarto use template???\n\n\n\nAndrew Bray: scrollytelling\n💡 “closeread” Quarto extension\nformat: closeread-html\n\n::: {.cr-section}\nblah blah left sidebar blah\n\n@cr-thing\n\n:::{.cr-thing}\nstuff that should appear on the right at trigger point\n:::\n\n:::\n💡 Can also add “focus effects” to “stickies” at trigger points. e.g. zooming in to pieces of an image, pan-to and scale-by\n[@cr-thing]{pan-to=”70%,-10%” scale-by=”2”}\n💡 Use the progression tracker (crProgressBlock OJS variable) in code to change the images as the user scrolls.\n🔗 Example"
  },
  {
    "objectID": "posts/2024-10-31-look_at_objects/index.html",
    "href": "posts/2024-10-31-look_at_objects/index.html",
    "title": "Look at your objects",
    "section": "",
    "text": "Random thought today: There are a lot of ways to “check in” on your intermediate objects in R.\nIt’s definitely good practice and something I have trouble pushing my students to do. Maybe I need to be more deliberate about how to do it.\nSo, there’s the classic way of just printing it out. This is fine. I tend to peek at my objects this way, except I do the peeking in the console… I can NOT get my students to adopt a workflow that pops between notebook and console though. Maybe it’s not the best.\nbob &lt;- 1:10\nbob\n\n [1]  1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "posts/2024-10-31-look_at_objects/index.html#looking-inside-pipelines",
    "href": "posts/2024-10-31-look_at_objects/index.html#looking-inside-pipelines",
    "title": "Look at your objects",
    "section": "Looking Inside Pipelines",
    "text": "Looking Inside Pipelines\nSpeaking of pipelines, I’m on the fence about the best way to “check in” on progress of a long pipeline. I tend to just highlight part of the pipeline and Cmd+Enter to run that section. But that’s kinda unreproducible and also gets annoying if I’m doing it many times.\nStudents tend to delete or comment out segments of pipelines and I do NOT like this, it’s so unwieldy.\n\nUsing the “passthrough” pipe\nmagrittr has a cute pipe %T&gt;% that means “do this next step but don’t pass its results”, which we can use in conjunction with print() to check stuff.\nIt’s almost perfect but the necessity of print() and the subtlety of the %T&gt;% pipe (it’s easy to miss) annoy me a bit.\n\nlibrary(magrittr)\n\npenguins %&gt;%\n  filter(species == \"Adelie\") %T&gt;%\n  print() %&gt;%  \n  summarize(n_rows = n())\n\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n# A tibble: 1 × 1\n  n_rows\n   &lt;int&gt;\n1    152\n\n\n(Honestly, I wish we in the tidyverse sphere used the other magrittr pipes more. Maybe another mini-post one day…)\n\n\nSummary functions that return x\nFinally, you might just use glimpse() in a pipeline, since it invisibly returns the data frame as well as printing a summary, so it can flow through the pipeline:\n\npenguins %&gt;%\n  filter(species == \"Adelie\") %&gt;%\n  glimpse() %&gt;%  \n  summarize(n_rows = n())\n\nRows: 152\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n# A tibble: 1 × 1\n  n_rows\n   &lt;int&gt;\n1    152\n\n\nMy problem here is simply that I don’t love glimpse()… if I’m verifying a pipeline step, I’d rather just see the raw data.\nGoogling around lead me to textreadr::peek(), which seems to be exactly that:\n\n# remotes::install(\"trinker/textreadr\")\nlibrary(textreadr)\n\npenguins %&gt;%\n  filter(species == \"Adelie\") %&gt;%\n  peek() %&gt;%  \n  summarize(n_rows = n())\n\nTable: [152 x 8]\n\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex    year\n1  Adelie  Torgersen 39.1           18.7          181               3750        male   2007\n2  Adelie  Torgersen 39.5           17.4          186               3800        female 2007\n3  Adelie  Torgersen 40.3           18            195               3250        female 2007\n4  Adelie  Torgersen &lt;NA&gt;           &lt;NA&gt;          &lt;NA&gt;              &lt;NA&gt;        &lt;NA&gt;   2007\n5  Adelie  Torgersen 36.7           19.3          193               3450        female 2007\n6  Adelie  Torgersen 39.3           20.6          190               3650        male   2007\n7  Adelie  Torgersen 38.9           17.8          181               3625        female 2007\n8  Adelie  Torgersen 39.2           19.6          195               4675        male   2007\n9  Adelie  Torgersen 34.1           18.1          193               3475        &lt;NA&gt;   2007\n10 Adelie  Torgersen 42             20.2          190               4250        &lt;NA&gt;   2007\n.. ...     ...       ...            ...           ...               ...         ...    ...  \n\n\n# A tibble: 1 × 1\n  n_rows\n   &lt;int&gt;\n1    152\n\n\nIt’s not on CRAN anymore (sadface). Also, tibbles get downgraded to data.frames. But still, I like this a lot."
  },
  {
    "objectID": "posts/2024-10-31-look_at_objects/index.html#conclusion",
    "href": "posts/2024-10-31-look_at_objects/index.html#conclusion",
    "title": "Look at your objects",
    "section": "Conclusion",
    "text": "Conclusion\nSo, no perfect solution for pipelines that I know of. And all these options will also print their output in a rendered qmd/Rmd - so they have the same issue as print debugging in that you have to remember to go back and remove code when you are finished developing.\nI think my personal wishlist would be, in no particular order:\n\nA dplyr::peek() function.\nA “print and pass” pipe that could be used in a pipeline without needing a function.\nSome kind of interactive tool in Quarto that would let you flag lines to be previewed upon chunk run, without them being printed in a rendered doc.\n\nThoughts? Ideas?"
  },
  {
    "objectID": "posts/2024-08-05-positron/index.html",
    "href": "posts/2024-08-05-positron/index.html",
    "title": "First thoughts on Positron",
    "section": "",
    "text": "This is a very disorganized list of notes I made trying out Positron for the first time. Hopefully some slightly more coherent updates will come along eventually as I use it more and/or it updates.\nWorking directories: I thought I would hate the “open a folder” workflow (as opposed to opening a .RProj) but actually I’m vibing with it. It’s especially nice for one-off tasks, e.g. when I use R to calculate an exam curve. I never quite liked choosing between a “floating” qmd or a one-time-use R Project.\n\n\n\nFolders behave like projects.\n\n\nThat said, my work didn’t “feel” like a project. I like having all the RStudio windows open in my dock so I can project hop. Relatedly - I crash R all the time, and I like that it only crashes the instance I’m in; does using Positron mean that if I crash things, all my projects close?\n\n\n\nRRRRRRRRRR\n\n\nQuarto: The “new notebook” shortcut on the landing page makes a Jupyter doc not a Quarto doc. Booo. Plus there’s NO RENDER BUTTON for Quarto docs. Ew. Worst,there’s no inline preview option in Quarto yet, which is a major dealbreaker for now. I’m told these things will be added; but for now Positron is not super optimized for Quarto.\n\n\n\nThis opens a new ipynb.\n\n\nChunks: The chunk shortcut is different. That’s fine, I think it’s PC/Mac consistent now. I do like the drop-down language options when you add a chunk… except that after the first chunk I don’t want to have to “confirm” my language choice every time. The “run this chunk” play button is IMHO better, although breaking my muscle memory has been hard.\n\n\n\nSnazzy, but now I have to hit “enter” every time I make a new chunk.\n\n\nPanes: I don’t like having the variables pane at the bottom, and then it disappears if you switch tabs at top. I like being able to see my environment at all times regardless of what help tab I’m in.\n \nFiles: I like having notification badges for unsaved files. It’s also just a lot easier to navigate between files in general.\n\n\n\nI love having the Explorer on the left!\n\n\nHelp: The dynamic suggestions are cool… but floating helpers are in my way. I like the info but it’s in my way enough that I would turn this off - I’d rather have some kind of permanent help text location in a corner that I can glance at when I need it.\n\n\n\nIt’s just kind of an excessive amount of pop-up and it’s blocking my pipeline."
  },
  {
    "objectID": "posts/2024-11-22-aes/index.html",
    "href": "posts/2024-11-22-aes/index.html",
    "title": "Move your aes",
    "section": "",
    "text": "library(palmerpenguins)\nlibrary(tidyverse)\nI’m taking a second here to expand on this interesting little discussion on BlueSky, about where to put the aes in a ggplot.\nBasically, the question boils down to:\nOption A: aes inside ggplot()\npenguins |&gt;\n  ggplot(aes(x = body_mass_g, \n             y = bill_length_mm)) +\n  geom_point()\nOption B: aes inside geom_*()\npenguins |&gt;\n  ggplot() +\n  geom_point(aes(x = body_mass_g, \n             y = bill_length_mm))\nOption C: aes outside ggplot()\npenguins |&gt;\n  ggplot() +\n  aes(x = body_mass_g, \n      y = bill_length_mm) +\n  geom_point()\nI think for most of of, Option A “looks right”. Probably this is because it’s more frequently taught that way, such as in R for Data Science.\nActually, in R4DS they also name the argument, i.e., mapping = aes(...), but that’s a whole other can of worms that I’m going to ignore for now.\nAnyways, I’m going to argue for Option C for two reasons:"
  },
  {
    "objectID": "posts/2024-11-22-aes/index.html#counterarguments",
    "href": "posts/2024-11-22-aes/index.html#counterarguments",
    "title": "Move your aes",
    "section": "Counterarguments",
    "text": "Counterarguments\nJust to try to anticipate a few of these…\n\nIt’s still a global mapping when it’s inside the ggplot() function.\n\nSure. But I see this particular inheritance confusion SO frequently among new users that it’s clear something isn’t being understood. My guess is that this makes the global mapping look like it’s on the same “level” as the local ones, since they are both inside one level of function.\n\nThe data and the mapping are the two required elements, that’s why they both belong in the ggplot() function.\n\nRequired in what sense? For the code to run without error you only need the dataset:\n\nggplot(penguins)\n\n\n\n\n\n\n\n\nFor an interesting plot of any kind, you’d need the mapping and the geometry - nobody is proposing putting geom_*() inside of ggplot() so I don’t see why aes() should be any different.\n\nI’m used to it that way so it looks right.\n\nSame, friend, same.\nI’ll probably be stuck in Option A for a while due to muscle memory - but I’m going to try out Option C in my teaching materials going forward and see how that goes!"
  },
  {
    "objectID": "posts/2024-07-20-lda_qda/index.html",
    "href": "posts/2024-07-20-lda_qda/index.html",
    "title": "1-D Illustration of LDA vs QDA with {distributional}",
    "section": "",
    "text": "So, three things happened this week that inspired this tidbit:\n\nI learned about the {distributional} package by … at the UseR 2024 conference, which basically defines distributions as their own objects, to be plotted or used in calculations. Very cool!\nI was reminded in a conversation recently that {gganimate} is cool and something I’d like to use more in classes.\nA student asked me why QDA can lead to circular boundaries and LDA can’t, when the only difference is whether we let the covariance vary by group. I answered by very badly drawing a series of pictures in the 1-D case.\n\nSo my goal here is to re-create those pictures as a gif.\n\nlibrary(tidyverse)\nlibrary(distributional)\nlibrary(gganimate)\n\nAlright, first thing is to figure out plotting two normal distributions using {distributional}\n\nmy_dists &lt;- c(dist_normal(mu = 0, sigma = 1), \n              dist_normal(mu = 3, sigma = 1))\n\nmy_dists\n\n&lt;distribution[2]&gt;\n[1] N(0, 1) N(3, 1)\n\n\nDISTRIBUTIONS AS OBJECTS my people I am so pleased with this structure.\nOkay hang on apparently we need ggdist too to plot it… whoa I don’t think I realized how awesome and built-out ggdist is.\nAnyways now it’s super easy…\n\nlibrary(ggdist)\n\nggplot(my_dists) +\n  stat_dist_halfeye(aes(dist = dist))\n\nError in `fortify()`:\n! `data` must be a &lt;data.frame&gt;, or an object coercible by `fortify()`,\n  or a valid &lt;data.frame&gt;-like object coercible by `as.data.frame()`.\nCaused by error in `.prevalidate_data_frame_like_object()`:\n! `dim(data)` must return an &lt;integer&gt; of length 2.\n\n\nOOPS, famous last words. Of course my objects still need to be in a data frame… duh, Kelly.\n\nmy_df &lt;- tibble(\n  dist = c(dist_normal(mu = 0, sigma = 1), \n              dist_normal(mu = 3, sigma = 1))\n)\n\n\nggplot(my_df) +\n  stat_dist_halfeye(aes(dist = dist))\n\n\n\n\n\n\n\n\nOkay cool but it’s sideways and also I need colors. (Side note, it’s annoying that “distribution” and “distance” are both super common stat words and they have the same natural abbreviation. Rabble rabble.)\nA little noodling and cheating with coord flip (there was probably a better way to get these on the x-axis) and I have what I want for now:\n\nmy_df &lt;- tibble(\n  dist = c(dist_normal(mu = 0, sigma = 1), \n              dist_normal(mu = 3, sigma = 1)),\n  name = c(\"Class A\", \"Class B\")\n)\n\n\nggplot(my_df) +\n  stat_dist_halfeye(aes(dist = dist,\n                        fill = name),\n                    alpha = 0.5) +\n  coord_flip() +\n  theme_void() +\n  theme(legend.position=\"none\")\n\n\n\n\n\n\n\n\nNow we add the lines to show where the decision boundary for LDA would be (assuming equal prior probs here):\n\nggplot(my_df) +\n  stat_dist_halfeye(aes(dist = dist,\n                        fill = name),\n                    alpha = 0.5) +\n  coord_flip() +\n  theme_void() +\n  theme(legend.position=\"none\") +\n  geom_hline(yintercept = 1.5) \n\n\n\n\n\n\n\n\nI kinda feel like I should be able to use geom_vline after coord_flip and have it not get flipped because it comes as a later layer. Rabble, rabble.\nAnyhoo. Now to animate.\nThis is a little weird to think about because gganimate wants to step through “state” or values in the data. I think I maybe want to set it up as two separate layers, one with the static blue curve and one with the moving red ones.\n\nmy_df &lt;- tibble(\n  means = (-8:8)/2,\n  dists = dist_normal(mu = means, sigma = 1),\n)\n\nggplot(my_df) +\n  stat_dist_halfeye(aes(dist = dists),\n                    alpha = 0.5,\n                    fill = \"#F8766D\") +\n  stat_dist_halfeye(aes(dist = dist_normal(mu = 0, sigma = 1)),\n                    alpha = 0.5,\n                    fill = \"#00BFC4\") +\n  coord_flip() +\n  theme_void() +\n  theme(legend.position=\"none\") +\n  geom_hline(aes(yintercept = (means)/2))\n\nWarning in layer_slabinterval(data = data, mapping = mapping, stat = StatSlabinterval, : All aesthetics have length 1, but the data has 17 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\n\n\n\n\n\n\n\nNow I gotta remember how you gganimate a plot. I think you add a layer with some kind of animate_ function?\n\nOk cool got it:\n\nanim &lt;-\n  ggplot(my_df) +\n  stat_dist_halfeye(aes(dist = dists),\n                    alpha = 0.5,\n                    fill = \"#F8766D\") +\n  stat_dist_halfeye(aes(dist = dist_normal(mu = 0, sigma = 1)),\n                    alpha = 0.5,\n                    fill = \"#00BFC4\") +\n  coord_flip() +\n  theme_void() +\n  theme(legend.position=\"none\") +\n  geom_hline(aes(yintercept = (means)/2)) +\n  transition_manual(means)\n\nanimate(anim)\n\n\n\n\n\n\n\n\nEt voila! What we’re seeing here is that if the curves have the same variance, they can only ever cross at one point. (Well, unless they have the exact same mean and have infinite overlap, but if that’s the case then LDA is pointless anyways.)\nSo now what if we let them have different variances? We’ll try one for starters:\n\nmy_df &lt;- tibble(\n  means = -1,\n  dists = dist_normal(mu = means, sigma = 3),\n)\n\nggplot(my_df) +\n  stat_dist_halfeye(aes(dist = dists),\n                    alpha = 0.5,\n                    fill = \"#F8766D\") +\n  stat_dist_halfeye(data = NULL, aes(dist = dist_normal(mu = 0, sigma = 1)),\n                    alpha = 0.5,\n                    fill = \"#00BFC4\") +\n  scale_thickness_shared() +\n  coord_flip() +\n  theme_void() +\n  theme(legend.position=\"none\") \n\n\n\n\n\n\n\n\nOkay scale_thickness_shared() ended up being really important here to keep the curves from being the same height (and thus different areas, ew).\nFinding the intersection point is more of a pain than I thought about at first, because Normal equations are not really closed-form solvable. But distributional makes this not TOO bad at least.\n\nmy_df &lt;- tibble(\n  means = (-8:8)/2,\n  dists = dist_normal(mu = means, sigma = 3),\n)\n\nstd_normal &lt;- dist_normal(mu = 0, sigma = 1)\n\ngrid &lt;- seq(-10, 10, 0.1)\nstd_dens &lt;- density(std_normal, grid)[[1]]\n\ncrosslines &lt;-\n  my_df$dists |&gt;\n  density(grid) |&gt;\n  map(\\(dens) order(abs(dens/std_dens - 1))[1:2]) |&gt;\n  map(\\(idx) sort(grid[idx])) |&gt;\n  reduce(rbind)\n\nmy_df &lt;- \n  my_df |&gt;\n  mutate(\n    lower = crosslines[,1],\n    upper = crosslines[,2]\n  )\n\nPhew. That took some doing actually.\nBUT! The part you should be excited about here is my_df$dists |&gt; density(grid). Like…. that vectorization is elegant af.\nAnyways. Cool. Here’s a gif.\n\nanim &lt;-\n  ggplot(my_df) +\n  stat_dist_halfeye(aes(dist = dists),\n                    alpha = 0.5,\n                    fill = \"#F8766D\") +\n  stat_dist_halfeye(data = NULL, aes(dist = dist_normal(mu = 0, sigma = 1)),\n                    alpha = 0.5,\n                    fill = \"#00BFC4\") +\n  scale_thickness_shared() +\n  coord_flip() +\n  theme_void() +\n  theme(legend.position=\"none\") +\n  geom_hline(aes(yintercept = lower)) +\n  geom_hline(aes(yintercept = upper)) +\n  transition_manual(means)\n\nanimate(anim)\n\n\n\n\n\n\n\n\nBoom! Two points of intersection, which lets you segment the space such that blue class is “inside” and red class is “outside”.\nIf you can mental-image this up to two dimensions, maybe you can see how equal-variance bell curves intersect at a straight line, and nonequal-variance onces can have an “inner circle” and “outer circle”, hence LDA vs QDA.\nThe end!\nIf I were using this in class, I’d probably add:\n\nSome sample observations, to show that in LDA/QDA these curves are the estimates we get based on observed data, not something we magically know ahead of time.\nSome background coloring or arrows or something to clarify that the boundaries are prediction boundaries; we predict red or blue class based on where a new observation lands.\nSome aesthetic dressing up: Nice outlines on the curves, a star or something at the density intersection, better colors than red-blue, etc."
  },
  {
    "objectID": "posts/2025-04-24-nse/index.html",
    "href": "posts/2025-04-24-nse/index.html",
    "title": "Punctuation and Other Problems",
    "section": "",
    "text": "I’m doing some mentoring for Posit Academy’s “Programming in R” course, and the learners in my group have been asking very clever and deep questions about how to use Non-Standard Eval in R functions.\nSpecifically, the thing that keeps cropping up that I haven’t been able to answer in a satisfying way is iterating through unquoted input.\nThis blog post from Albert Rapp is excellent pre-reading.\nLet’s try to figure this out once and for all."
  },
  {
    "objectID": "posts/2025-04-24-nse/index.html#set-the-scene",
    "href": "posts/2025-04-24-nse/index.html#set-the-scene",
    "title": "Punctuation and Other Problems",
    "section": "Set the scene",
    "text": "Set the scene\nFor the sake of example, let’s suppose the task I want to do is count how many ones are in a particular column.\nI’ve written a nice function, using tunneling ({{}}) to run on unquoted variable names.\n\n\ncount_ones &lt;- function(data, var) {\n  \n  data |&gt;\n    summarize(\n      n_ones = sum({{var}} == 1)\n    ) |&gt;\n    pull(n_ones)\n  \n}\n\ncount_ones(mtcars, vs)\n#&gt; [1] 14\n\nFabulous. We could clean this output up a bit, but we won’t, because lazy.\nSo, the question is, what if I want to do this to multiple columns at once?"
  },
  {
    "objectID": "posts/2025-04-24-nse/index.html#option-1-mapping",
    "href": "posts/2025-04-24-nse/index.html#option-1-mapping",
    "title": "Punctuation and Other Problems",
    "section": "Option 1: mapping",
    "text": "Option 1: mapping\nThe challenge here lies in the fact that if we put unquoted variable names into the map() function, the code “triggers” before it “gets to” the count_ones() function.\n\nmap(c(vs, am, gear, carb), \n    \\(x) count_ones(mtcars, x))\n#&gt; Error: object 'vs' not found\n\nOne solution is to fall back onto strings for the map() input and then re-unquote-ify them for use in count_ones(), which is highly unsatisfying.\n\nmap(c(\"vs\", \"am\", \"gear\", \"carb\"), \n    \\(x) count_ones(mtcars, !!sym(x)))\n#&gt; [[1]]\n#&gt; [1] 14\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 13\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 0\n#&gt; \n#&gt; [[4]]\n#&gt; [1] 7\n\nIt’s not terrible but the !!sym(x) is far from intuitive. I always read !! as “access the information stored in” and sym as “turn this from a string to a name”. So, it kind of makes sense - we hand a string to count_ones() but first we say “Don’t use this string, instead access the information in the name of the string.”\nI’m still convinced there’s a better way, though. Or at least, a different way.\nWhat I want to do is find a way to “freeze” the unquoted variable names so they can be passed into count_ones().\nMy first thought was to use quos(). Here’s now I understand these functions:\n\nquo() = freeze this one unquoted thing\nquos() = freeze this vector of unquoted things\nenquo() = freeze this unquoted function argument\nenquos() = frees this vector of unquoted function arguments\n\n\nmap(quos(c(vs, am, gear, carb)),\n    \\(x) count_ones(mtcars, x))\n#&gt; Error in `map()`:\n#&gt; ℹ In index: 1.\n#&gt; Caused by error in `summarize()`:\n#&gt; ℹ In argument: `n_ones = sum(x == 1)`.\n#&gt; Caused by error:\n#&gt; ! Base operators are not defined for quosures. Do you need to unquote\n#&gt;   the quosure?\n#&gt; \n#&gt; # Bad: myquosure == rhs\n#&gt; \n#&gt; # Good: !!myquosure == rhs\n\nWait, this is great! The error is being triggered in sum() inside of count_ones(), not inside of map(). So we did freeze it.\nThe error message suggests that I need to use !! inside of count_ones() to “unfreeze”. I’m skeptical, because I don’t want to unfreeze x; I want to access the name vs. Also my goal is not to modify that function.\nInstead I think this might just be a missed tunneling, so that the frozen column names get passed through my anonymous function.\n\nmap(quos(c(vs, am, gear, carb)),\n    \\(x) count_ones(mtcars, {{x}}))\n#&gt; [[1]]\n#&gt; [1] 34\n\nDang I really thought that would work, but it appears that by using quos(), I’ve accidentally frozen the whole vector together and counted everything in all columns. Which, honestly, is kind of cool - but not what I meant to do.\nI really don’t want to have to quo() each individual column name.\nLet me take a look a this output:\n\nquos(c(vs, am, gear, carb))\n#&gt; &lt;list_of&lt;quosure&gt;&gt;\n#&gt; \n#&gt; [[1]]\n#&gt; &lt;quosure&gt;\n#&gt; expr: ^c(vs, am, gear, carb)\n#&gt; env:  global\n\nOkay so it froze the whole expression. Maybe we just don’t want the c(), because quos() is already concatenating?\n\nquos(vs, am, gear, carb)\n#&gt; &lt;list_of&lt;quosure&gt;&gt;\n#&gt; \n#&gt; [[1]]\n#&gt; &lt;quosure&gt;\n#&gt; expr: ^vs\n#&gt; env:  global\n#&gt; \n#&gt; [[2]]\n#&gt; &lt;quosure&gt;\n#&gt; expr: ^am\n#&gt; env:  global\n#&gt; \n#&gt; [[3]]\n#&gt; &lt;quosure&gt;\n#&gt; expr: ^gear\n#&gt; env:  global\n#&gt; \n#&gt; [[4]]\n#&gt; &lt;quosure&gt;\n#&gt; expr: ^carb\n#&gt; env:  global\n\nThis is promising! A list of quosures is what we want!\n\nmap(quos(vs, am, gear, carb),\n    \\(x) count_ones(mtcars, {{x}}))\n#&gt; [[1]]\n#&gt; [1] 14\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 13\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 0\n#&gt; \n#&gt; [[4]]\n#&gt; [1] 7\n\n\n\n\nI am pleased with this solution."
  },
  {
    "objectID": "posts/2025-04-24-nse/index.html#option-2-pass-the-dots",
    "href": "posts/2025-04-24-nse/index.html#option-2-pass-the-dots",
    "title": "Punctuation and Other Problems",
    "section": "Option 2: Pass the dots",
    "text": "Option 2: Pass the dots\nThe other clever approach one of my learners took was to rewrite the original function to accept the variable names in the dots (...).\nThis works great if you are just sending the variable names along to the next internal function:\n\nselect_all &lt;- function(data, ...) {\n  \n  data |&gt;\n    select(...) |&gt;\n    head()\n  \n}\n\nselect_all(mtcars, vs, am, gear, carb)\n#&gt;                   vs am gear carb\n#&gt; Mazda RX4          0  1    4    4\n#&gt; Mazda RX4 Wag      0  1    4    4\n#&gt; Datsun 710         1  1    4    1\n#&gt; Hornet 4 Drive     1  0    3    1\n#&gt; Hornet Sportabout  0  0    3    2\n#&gt; Valiant            1  0    3    1\n\nHowever, of course, this does not just slot in to our function:\n\n\ncount_ones &lt;- function(data, ...) {\n  \n  data |&gt;\n    summarize(\n      n_ones = sum(... == 1)\n    ) |&gt;\n    pull(n_ones)\n  \n}\n\ncount_ones(mtcars, vs, am, gear, carb)\n#&gt; Error in `summarize()`:\n#&gt; ℹ In argument: `n_ones = sum(... == 1)`.\n#&gt; Caused by error:\n#&gt; ! object 'vs' not found\n\nThe tidy approach to doing something to many columns is to use across():\n\n\n  mtcars |&gt;\n    summarize(\n      across(c(vs, am, gear, carb),\n            ~sum(.x == 1)\n    ))\n#&gt;   vs am gear carb\n#&gt; 1 14 13    0    7\n\nBut inside of a function, this fails:\n\ncount_ones &lt;- function(data, ...) {\n  \n  mtcars |&gt;\n    summarize(\n      across(...,\n            ~sum(.x == 1)\n    ))\n}\n\ncount_ones(mtcars, vs, am, gear, carb)\n#&gt; Error in `summarize()`:\n#&gt; ℹ In argument: `across(..., ~sum(.x == 1))`.\n#&gt; Caused by error in `across()`:\n#&gt; ! Can't compute column `vs`.\n#&gt; Caused by error:\n#&gt; ! object 'gear' not found\n\nI surmise this is an arguments problem: across() expects a single argument, which is a vector of the column names, while the dots are passing the inputs along as four separate arguments.\nMy first instinct was to use dots_list() to smush the dots inputs into a single list object to hand to across(). But this fails for perhaps predictable reasons:\n\ncount_ones &lt;- function(data, ...) {\n  \n  args &lt;- dots_list(...)\n  \n  mtcars |&gt;\n    summarize(\n      across(args,\n            ~sum(.x == 1)\n    ))\n\n}\n\ncount_ones(mtcars, vs, am, gear, carb)\n#&gt; Error: object 'vs' not found\n\nYe Olde NSE strikes again: dots_list() is triggering the unquoted names to be evaluated, so vs not found.\nWell, we did just learn that quos() will get us a list of quosures, so let’s hit the dots with that:\n\ncount_ones &lt;- function(data, ...) {\n  \n  args &lt;- enquos(...)\n  \n  mtcars |&gt;\n    summarize(\n      across(args,\n            ~sum(.x == 1)\n    ))\n\n}\n\ncount_ones(mtcars, vs, am, gear, carb)\n#&gt; Error in `summarize()`:\n#&gt; ℹ In argument: `across(args, ~sum(.x == 1))`.\n#&gt; Caused by error in `across()`:\n#&gt; ! Can't select columns with `args`.\n#&gt; ✖ `args` must be numeric or character, not a &lt;quosures/list&gt; object.\n\nAlright, so across() can’t handle a list. One thing we could definitely do at this point is just move our map() approach to inside of the function:\n\ncount_ones &lt;- function(data, ...) {\n  \n  args &lt;- enquos(...)\n  \n  map(args,\n      \\(x) count_ones(mtcars, {{x}}))\n\n}\n\ncount_ones(mtcars, vs, am, gear, carb)\n\nFriends. I did not mean to put count_ones inside of itself. The above code fully crashed my R Session, with this delightful error.\n\n\n\nPlease enjoy my hilarious failure.\n\n\n\n\n\nTunneling has consequences.\n\n\nLet’s try this again.\n\n\ncount_ones &lt;- function(data, ...) {\n  \n  args &lt;- enquos(...)\n  \n  map(args,\n      \\(x) \n      mtcars |&gt;\n        summarize(\n          n_ones = sum({{x}} == 1)\n          ) |&gt;\n        pull(n_ones))\n\n}\n\ncount_ones(mtcars, vs, am, gear, carb)\n#&gt; [[1]]\n#&gt; [1] 14\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 13\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 0\n#&gt; \n#&gt; [[4]]\n#&gt; [1] 7\n\nI’m tired and this is getting long …but I still really want to defeat the across() problem, because the ... + across() seems like an extremely handy construct.\nThere is one “free” solution, which is to just reduce our dataset to the columns we care about, and then tell across() to apply to everything():\n\ncount_ones &lt;- function(data, ...) {\n\n  mtcars |&gt;\n    select(...) |&gt;\n    summarize(\n      across(everything(),\n            ~sum(.x == 1)\n    ))\n\n}\n\ncount_ones(mtcars, vs, am, gear, carb)\n#&gt;   vs am gear carb\n#&gt; 1 14 13    0    7\n\nThis would probably be fine for every use case I can think of. But it’s not technically the same as using across() directly, because if you use across() inside mutate() it will keep all the other columns.\n\nExhibit A:\n\n  mtcars |&gt;\n    mutate(\n      across(c(vs, am, gear, carb),\n             sqrt)\n    ) |&gt;\n  head()\n#&gt;                    mpg cyl disp  hp drat    wt  qsec vs am     gear     carb\n#&gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1 2.000000 2.000000\n#&gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1 2.000000 2.000000\n#&gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1 2.000000 1.000000\n#&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0 1.732051 1.000000\n#&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0 1.732051 1.414214\n#&gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0 1.732051 1.000000\n\n\n\nExhibit B:\n\n  mtcars |&gt;\n    select(vs, am, gear, carb) |&gt;\n    mutate(\n      across(everything(),\n            sqrt\n    )) |&gt;\n  head()\n#&gt;                   vs am     gear     carb\n#&gt; Mazda RX4          0  1 2.000000 2.000000\n#&gt; Mazda RX4 Wag      0  1 2.000000 2.000000\n#&gt; Datsun 710         1  1 2.000000 1.000000\n#&gt; Hornet 4 Drive     1  0 1.732051 1.000000\n#&gt; Hornet Sportabout  0  0 1.732051 1.414214\n#&gt; Valiant            1  0 1.732051 1.000000\n\nTeam, we gotta crack this so I can go to bed. Let’s take stock:\n\nWe know how to “freeze” the variable names from the dots into a list of quosures with enquos()\nWe need to find a way to pass that information as a vector object to across().\n\n\nSince this is a post about punctuation, let’s bring in the big guns: the TRIPLE BANG!!!\nThis guy !!! is one of my all time favorite tricks. It lets you turn a list of things into separate function arguments, which is called splicing.\n\nargs &lt;- quos(vs, am, gear, carb)\n\n## won't work, because it looks for the column named 'args'\nmtcars |&gt;\n  select(args) |&gt;\n  head()\n#&gt; Error in `select()`:\n#&gt; ! Can't select columns with `args`.\n#&gt; ✖ `args` must be numeric or character, not a &lt;quosures/list&gt; object.\n\n## will work, because it splices the contents of the `args` vector into separate inputs to select\nmtcars |&gt;\n  select(!!!args) |&gt;\n  head()\n#&gt;                   vs am gear carb\n#&gt; Mazda RX4          0  1    4    4\n#&gt; Mazda RX4 Wag      0  1    4    4\n#&gt; Datsun 710         1  1    4    1\n#&gt; Hornet 4 Drive     1  0    3    1\n#&gt; Hornet Sportabout  0  0    3    2\n#&gt; Valiant            1  0    3    1\n\nThe bad news: What we want here is the opposite of splicing: we want our list of quosures to become a vector of quosures.\nThe good news: If only we had a function that takes multiple arguments and concatenates them into a vector….\n\n\n\nActually, c() is for concatenate.\n\n\n\ncount_ones &lt;- function(data, ...) {\n  \n  args &lt;- enquos(...)\n  \n  data |&gt;\n    summarize(\n      across(c(!!!args),\n            ~sum(.x == 1)\n    ))\n\n}\n\ncount_ones(mtcars, vs, am, gear, carb)\n#&gt;   vs am gear carb\n#&gt; 1 14 13    0    7\n\nBoom! It still feels a little annoying to me that we had to freeze - splice - concatenate, that feels like too many steps, but I’ll take it. I can go to bed unfrustrated!\nThus ends my stream-of-consciousness journey into NSE. If you came along with me this far, thanks for hanging out, and let me know if there is any rlang trickery that I missed!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "paRticles",
    "section": "",
    "text": "Punctuation and Other Problems\n\n\n\n\n\n\nrandom\n\n\nnse\n\n\n\n\n\n\n\n\n\nApr 24, 2025\n\n\nKelly Bodwin\n\n\n\n\n\n\n\n\n\n\n\n\nMove your aes\n\n\n\n\n\n\nrandom\n\n\nopinion\n\n\nteaching\n\n\n\n\n\n\n\n\n\nNov 22, 2024\n\n\nKelly Bodwin\n\n\n\n\n\n\n\n\n\n\n\n\nLook at your objects\n\n\n\n\n\n\nrandom\n\n\n\n\n\n\n\n\n\nOct 31, 2024\n\n\nKelly Bodwin\n\n\n\n\n\n\n\n\n\n\n\n\nNotes from Posit::conf session on Quarto\n\n\n\n\n\n\nconf\n\n\n\n\n\n\n\n\n\nAug 14, 2024\n\n\nKelly Bodwin\n\n\n\n\n\n\n\n\n\n\n\n\nFirst thoughts on Positron\n\n\n\n\n\n\nnews\n\n\nopinion\n\n\n\n\n\n\n\n\n\nAug 5, 2024\n\n\nKelly Bodwin\n\n\n\n\n\n\n\n\n\n\n\n\n1-D Illustration of LDA vs QDA with {distributional}\n\n\n\n\n\n\nteaching\n\n\nnew packages\n\n\n\n\n\n\n\n\n\nJul 20, 2024\n\n\nKelly Bodwin\n\n\n\n\n\n\n\n\n\n\n\n\npaRticles\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 13, 2024\n\n\nKelly Bodwin\n\n\n\n\n\n\nNo matching items"
  }
]