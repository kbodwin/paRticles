{
  "hash": "3703b0c7412fb4f999fad25dd5a5b6ec",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Look at your objects\"\ndate: \"2034-08-05\"\ndraft: true\n---\n\n\nRandom thought today: There are a lot of ways to \"check in\" on your intermediate objects in R.\n\n![](behold my stuff)\n\nIt's definitely good practice and something I have trouble pushing my students to do.  Maybe I need to be more deliberate about how to do it.\n\n\nSo, there's the classic way of just printing it out.  This is fine.  I tend to peek at my objects this way, except I do the peeking in the console... I can NOT get my students to adopt a workflow that pops between notebook and console though.  Maybe it's not the best.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbob <- 1:10\nbob\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\n---\n\nI also see this in some folks' code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbob <- 1:10; bob\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\nI especially see it in plotting with ggplot for some reason:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n\np <- ggplot(penguins, aes(x = body_mass_g)) +\n  geom_histogram(); p\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nI do not like this at all.  Perhaps it's a bias against semicolons, I thought I left those behind when I gave up on Java.  But I don't like the print statement being hidden on a line with code.\n\n---\n\nNow, a student taught me this trick, and I think it's super rad:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(bob <- 1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\nBut it does get a bit inelegant/cumbersome with multiline code and pipelines in my opinion:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(pen_ad <- penguins %>%\n  filter(species == \"Adelie\") %>%\n   summarize(mean(body_mass_g, na.rm = TRUE)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  `mean(body_mass_g, na.rm = TRUE)`\n                              <dbl>\n1                             3701.\n```\n\n\n:::\n:::\n\n\n---\n\nSpeaking of pipelines, I'm on the fence about the best way to \"check in\" on progress of a long pipeline.  I tend to just highlight part of the pipeline and Cmd+Enter to run that section.  But that's kinda unreproducible and also gets annoying if I'm doing it many times.\n\nStudents tend to delete or comment out segments of pipelines and I do NOT like this, it's so unwieldy.\n\n---\n\n`magrittr` has a cute pipe `%T>%` that means \"do this next step but don't pass its results\", which we can use in conjunction with `print()` to check stuff.\n\nIt's almost perfect but the necessity of `print()` and the \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'magrittr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:purrr':\n\n    set_names\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:tidyr':\n\n    extract\n```\n\n\n:::\n\n```{.r .cell-code}\npenguins %>%\n  filter(species == \"Adelie\") %T>%\n  print() %>%  \n  summarize(n_rows = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  n_rows\n   <int>\n1    152\n```\n\n\n:::\n:::\n\n\n(Honestly, I wish we in the tidyverse sphere used the other `magrittr` pipes more.  Maybe another mini-post one day...)\n\n---\n\nOne option is to throw a `peek()` inside a pipeline...\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}