{
  "hash": "d1f0d15b7d21f90355a959a5b2abb08f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Look at your objects\"\ndate: \"2024-10-31\"\ndraft: false\ncategories: [random]\nexecute:\n  warning: false\n  message: false\nimage: \"magnifying.jpeg\"\n---\n\n\nRandom thought today: There are a lot of ways to \"check in\" on your intermediate objects in R.\n\n![](https://media1.tenor.com/m/sozJDHTslpEAAAAd/behold-stuff.gif)\n\nIt's definitely good practice and something I have trouble pushing my students to do.  Maybe I need to be more deliberate about how to do it.\n\n\nSo, there's the classic way of just printing it out.  This is fine.  I tend to peek at my objects this way, except I do the peeking in the console... I can NOT get my students to adopt a workflow that pops between notebook and console though.  Maybe it's not the best.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbob <- 1:10\nbob\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\n---\n\n### Semicolons\n\nI also see this in some folks' code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbob <- 1:10; bob\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\nI especially see it in plotting with ggplot for some reason:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\np <- ggplot(penguins, aes(x = body_mass_g)) +\n  geom_histogram(); p\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nI do not like this at all.  Perhaps it's a bias against semicolons, I thought I left those behind when I gave up on Java.  But I don't like the print statement being hidden on a line with code.\n\n\n### Parentheses\n\nNow, a student taught me this trick, and I think it's super rad:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(bob <- 1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\nBut it does get a bit inelegant/cumbersome with multiline code and pipelines in my opinion:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(pen_ad <- penguins %>%\n  filter(species == \"Adelie\") %>%\n   summarize(mean(body_mass_g, na.rm = TRUE)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  `mean(body_mass_g, na.rm = TRUE)`\n                              <dbl>\n1                             3701.\n```\n\n\n:::\n:::\n\n\n\n## Looking Inside Pipelines\n\nSpeaking of pipelines, I'm on the fence about the best way to \"check in\" on progress of a long pipeline.  I tend to just highlight part of the pipeline and Cmd+Enter to run that section.  But that's kinda unreproducible and also gets annoying if I'm doing it many times.\n\nStudents tend to delete or comment out segments of pipelines and I do NOT like this, it's so unwieldy.\n\n\n### Using the \"passthrough\" pipe\n\n`magrittr` has a cute pipe `%T>%` that means \"do this next step but don't pass its results\", which we can use in conjunction with `print()` to check stuff.\n\nIt's almost perfect but the necessity of `print()` and the subtlety of the `%T>%` pipe (it's easy to miss) annoy me a bit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)\n\npenguins %>%\n  filter(species == \"Adelie\") %T>%\n  print() %>%  \n  summarize(n_rows = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  n_rows\n   <int>\n1    152\n```\n\n\n:::\n:::\n\n\n(Honestly, I wish we in the tidyverse sphere used the other `magrittr` pipes more.  Maybe another mini-post one day...)\n\n\n### Summary functions that return `x`\n\nFinally, you might just use `glimpse()` in a pipeline, since it invisibly returns the data frame as well as printing a summary, so it can flow through the pipeline:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  filter(species == \"Adelie\") %>%\n  glimpse() %>%  \n  summarize(n_rows = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 152\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  n_rows\n   <int>\n1    152\n```\n\n\n:::\n:::\n\n\nMy problem here is simply that I don't love `glimpse()`... if I'm verifying a pipeline step, I'd rather just see the raw data.\n\nGoogling around lead me to `textreadr::peek()`, which seems to be exactly that: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remotes::install(\"trinker/textreadr\")\nlibrary(textreadr)\n\npenguins %>%\n  filter(species == \"Adelie\") %>%\n  peek() %>%  \n  summarize(n_rows = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTable: [152 x 8]\n\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex    year\n1  Adelie  Torgersen 39.1           18.7          181               3750        male   2007\n2  Adelie  Torgersen 39.5           17.4          186               3800        female 2007\n3  Adelie  Torgersen 40.3           18            195               3250        female 2007\n4  Adelie  Torgersen <NA>           <NA>          <NA>              <NA>        <NA>   2007\n5  Adelie  Torgersen 36.7           19.3          193               3450        female 2007\n6  Adelie  Torgersen 39.3           20.6          190               3650        male   2007\n7  Adelie  Torgersen 38.9           17.8          181               3625        female 2007\n8  Adelie  Torgersen 39.2           19.6          195               4675        male   2007\n9  Adelie  Torgersen 34.1           18.1          193               3475        <NA>   2007\n10 Adelie  Torgersen 42             20.2          190               4250        <NA>   2007\n.. ...     ...       ...            ...           ...               ...         ...    ...  \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  n_rows\n   <int>\n1    152\n```\n\n\n:::\n:::\n\n\nIt's not on CRAN anymore (sadface).  Also, tibbles get downgraded to data.frames.  But still, I like this a lot.\n\n## Conclusion\n\nSo, no perfect solution for pipelines that I know of.  And all these options will also print their output in a rendered qmd/Rmd - so they have the same issue as *print debugging* in that you have to remember to go back and remove code when you are finished developing.\n\nI think my personal wishlist would be, in no particular order:\n\n* A `dplyr::peek()` function.\n\n* A \"print and pass\" pipe that could be used in a pipeline without needing a function.\n\n* Some kind of interactive tool in Quarto that would let you flag lines to be previewed upon chunk run, without them being printed in a rendered doc.\n\nThoughts?  Ideas?\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}